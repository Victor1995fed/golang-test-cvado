// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/server.proto

package golang_test_cvado

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CvadoClient is the client API for Cvado service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CvadoClient interface {
	// Поиск книг по автору
	GetBooksByAuthor(ctx context.Context, in *RequestAuthor, opts ...grpc.CallOption) (*ResponseBook, error)
	// Поиск авторов по книге
	GetAuthorByBook(ctx context.Context, in *RequestBook, opts ...grpc.CallOption) (*ResponseAuthor, error)
}

type cvadoClient struct {
	cc grpc.ClientConnInterface
}

func NewCvadoClient(cc grpc.ClientConnInterface) CvadoClient {
	return &cvadoClient{cc}
}

func (c *cvadoClient) GetBooksByAuthor(ctx context.Context, in *RequestAuthor, opts ...grpc.CallOption) (*ResponseBook, error) {
	out := new(ResponseBook)
	err := c.cc.Invoke(ctx, "/server.Cvado/GetBooksByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cvadoClient) GetAuthorByBook(ctx context.Context, in *RequestBook, opts ...grpc.CallOption) (*ResponseAuthor, error) {
	out := new(ResponseAuthor)
	err := c.cc.Invoke(ctx, "/server.Cvado/GetAuthorByBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CvadoServer is the server API for Cvado service.
// All implementations must embed UnimplementedCvadoServer
// for forward compatibility
type CvadoServer interface {
	// Поиск книг по автору
	GetBooksByAuthor(context.Context, *RequestAuthor) (*ResponseBook, error)
	// Поиск авторов по книге
	GetAuthorByBook(context.Context, *RequestBook) (*ResponseAuthor, error)
	mustEmbedUnimplementedCvadoServer()
}

// UnimplementedCvadoServer must be embedded to have forward compatible implementations.
type UnimplementedCvadoServer struct {
}

func (UnimplementedCvadoServer) GetBooksByAuthor(context.Context, *RequestAuthor) (*ResponseBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedCvadoServer) GetAuthorByBook(context.Context, *RequestBook) (*ResponseAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorByBook not implemented")
}
func (UnimplementedCvadoServer) mustEmbedUnimplementedCvadoServer() {}

// UnsafeCvadoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CvadoServer will
// result in compilation errors.
type UnsafeCvadoServer interface {
	mustEmbedUnimplementedCvadoServer()
}

func RegisterCvadoServer(s grpc.ServiceRegistrar, srv CvadoServer) {
	s.RegisterService(&Cvado_ServiceDesc, srv)
}

func _Cvado_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CvadoServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Cvado/GetBooksByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CvadoServer).GetBooksByAuthor(ctx, req.(*RequestAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cvado_GetAuthorByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CvadoServer).GetAuthorByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Cvado/GetAuthorByBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CvadoServer).GetAuthorByBook(ctx, req.(*RequestBook))
	}
	return interceptor(ctx, in, info, handler)
}

// Cvado_ServiceDesc is the grpc.ServiceDesc for Cvado service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cvado_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Cvado",
	HandlerType: (*CvadoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _Cvado_GetBooksByAuthor_Handler,
		},
		{
			MethodName: "GetAuthorByBook",
			Handler:    _Cvado_GetAuthorByBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
